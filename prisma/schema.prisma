// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // Optional for connection pooling
}

// ============================================
// AUTHENTICATION & USERS
// ============================================

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  passwordHash  String?   @map("password_hash")
  name          String?
  isAnonymous   Boolean   @default(false) @map("is_anonymous")
  emailHash     String?   @map("email_hash") // For anonymous users
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  
  // Relations
  moodEntries          MoodEntry[]
  healthRecords        HealthRecord[]
  generationLogs       GenerationLog[]
  userPlan             UserPlan?
  onboardingData       OnboardingUserData?
  chatSessions         ChatSession[]
  userLegalAcceptances UserLegalAcceptance[]
  accounts             Account[]
  sessions             Session[]
  
  @@map("users")
}

// NextAuth Account model
model Account {
  id                String  @id @default(uuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// NextAuth Session model
model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

// NextAuth Verification Token
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ============================================
// MOOD TRACKING
// ============================================

model MoodEntry {
  id         String   @id @default(uuid())
  userId     String   @map("user_id")
  timestamp  BigInt   // Using BigInt for timestamp in milliseconds
  score      Int      // 0-5 scale
  note       String   @db.Text
  aiAnalysis String?  @map("ai_analysis") @db.Text
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, timestamp])
  @@map("mood_entries")
}

// ============================================
// HEALTH RECORDS (PRONTUÁRIOS)
// ============================================

enum RecordType {
  GLOBAL
  PARCIAL
}

model HealthRecord {
  id              String     @id @default(uuid())
  userId          String     @map("user_id")
  content         String     @db.Text
  timestamp       BigInt     // Using BigInt for timestamp in milliseconds
  recordType      RecordType @default(PARCIAL) @map("record_type")
  moodEntryIds    String[]   @default([]) @map("mood_entry_ids")
  generationMonth String?    @map("generation_month") // Format: YYYY-MM
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, recordType, createdAt])
  @@map("health_records")
}

// Log permanente de gerações de prontuários PARCIAL
// Esta tabela nunca deve ter registros deletados, garantindo que o contador
// de gerações mensais seja preciso mesmo quando prontuários são excluídos
model GenerationLog {
  id              String   @id @default(uuid())
  userId          String   @map("user_id")
  recordType      RecordType @default(PARCIAL) @map("record_type")
  generationMonth String   @map("generation_month") // Format: YYYY-MM
  healthRecordId  String?  @map("health_record_id") // Reference (can be null if record deleted)
  createdAt       DateTime @default(now()) @map("created_at")
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, generationMonth])
  @@map("generation_logs")
}

// ============================================
// SUBSCRIPTION & PLANS
// ============================================

enum PlanType {
  FREE
  ESSENTIAL
  PREMIUM
}

model UserPlan {
  id               String    @id @default(uuid())
  userId           String    @unique @map("user_id")
  planId           String    @map("plan_id") // Stripe price ID
  planType         PlanType  @default(FREE) @map("plan_type")
  stripeCustomerId String?   @map("stripe_customer_id")
  stripeSubscriptionId String? @map("stripe_subscription_id")
  status           String    @default("active") // active, canceled, past_due, etc.
  currentPeriodEnd DateTime? @map("current_period_end")
  canceledAt       DateTime? @map("canceled_at")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, status])
  @@map("user_plans")
}

// ============================================
// ONBOARDING
// ============================================

model OnboardingUserData {
  id        String   @id @default(uuid())
  userId    String   @unique @map("user_id")
  data      Json     // Store all onboarding data as JSON
  completedSteps String[] @default([]) @map("completed_steps")
  isComplete Boolean  @default(false) @map("is_complete")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("onboarding_user_data")
}

// ============================================
// CHAT WITH AI
// ============================================

model ChatSession {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages ChatMessage[]
  
  @@index([userId, createdAt])
  @@map("chat_sessions")
}

model ChatMessage {
  id        String   @id @default(uuid())
  sessionId String   @map("session_id")
  content   String   @db.Text
  isUser    Boolean  @map("is_user")
  timestamp BigInt
  createdAt DateTime @default(now()) @map("created_at")
  
  session ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  @@index([sessionId, createdAt])
  @@map("chat_messages")
}

// ============================================
// LEGAL DOCUMENTS
// ============================================

enum LegalDocumentType {
  TERMS_OF_USE
  PRIVACY_POLICY
}

model LegalDocument {
  id           String            @id @default(uuid())
  documentType LegalDocumentType @map("document_type")
  content      String            @db.Text
  version      String
  createdAt    DateTime          @default(now()) @map("created_at")
  
  userAcceptances UserLegalAcceptance[]
  
  @@map("legal_documents")
}

model UserLegalAcceptance {
  id         BigInt   @id @default(autoincrement())
  userId     String   @map("user_id")
  documentId String   @map("document_id")
  createdAt  DateTime @default(now()) @map("created_at")
  
  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  document LegalDocument @relation(fields: [documentId], references: [id])
  
  @@map("user_legal_acceptances")
}

// ============================================
// LEADS (Professional Landing Page)
// ============================================

model Lead {
  id        String   @id @default(uuid())
  name      String
  email     String
  clinic    String?
  phone     String?
  leadType  String   @default("professional") @map("lead_type")
  createdAt DateTime @default(now()) @map("created_at")
  
  @@map("leads")
}

enum PsychologistLeadStatus {
  NEW
  CONTACTED
  DEMO_SCHEDULED
  DEMO_COMPLETED
  PROPOSAL_SENT
  CONVERTED
  LOST
}

enum PsychologistLeadSource {
  WEBSITE
  REFERRAL
  SOCIAL_MEDIA
  OTHER
}

model PsychologistLead {
  id        String                   @id @default(uuid())
  name      String
  email     String
  phone     String
  crp       String?                  // Registro no Conselho Regional de Psicologia
  message   String?                  @db.Text
  status    PsychologistLeadStatus   @default(NEW)
  source    PsychologistLeadSource   @default(WEBSITE)
  notes     String?                  @db.Text // Notas internas da equipe
  createdAt DateTime                 @default(now()) @map("created_at")
  updatedAt DateTime                 @updatedAt @map("updated_at")
  
  @@index([status, createdAt])
  @@index([email])
  @@map("psychologist_leads")
}

